[
  {
    "objectID": "ST558_HW3.html",
    "href": "ST558_HW3.html",
    "title": "ST558_HW3 - Lee Worthington",
    "section": "",
    "text": "Task 2: reading delimited data\n\nGlass data\n\n# load library\nsuppressMessages(suppressWarnings(library(tidyverse)))\n\n# Question 1 - read in file and print results\nglass_data <- suppressMessages(read_csv(\n  'https://www4.stat.ncsu.edu/~online/datasets/glass.data',\n  col_names = c('id', 'ri', 'na', 'mg', 'al', 'si', 'k', 'ca', 'ba', 'fe', 'type_of_glass')\n))\nglass_data\n\n# A tibble: 214 × 11\n      id    ri    na    mg    al    si     k    ca    ba    fe type_of_glass\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>         <dbl>\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n# Question 2 + 3 - create new field and filter data\nglass_data |>\n  \n  # update type_of_glass field\n  mutate(type_of_glass = ifelse(type_of_glass == 1, 'building_windows_float_processed',\n                ifelse(type_of_glass == 2, 'building_windows_non_float_processed',\n                       ifelse(type_of_glass == 3, 'vehicle_windows_float_processed',\n                              ifelse(type_of_glass == 4, 'vehicle_windows_non_float_processed',\n                                     ifelse(type_of_glass == 5, 'containers',\n                                            ifelse(type_of_glass == 6, 'tableware',\n                                                   ifelse(type_of_glass == 7, 'headlamps', NA)))))))) |>\n  \n  # filter on fe variable (& or , should work)\n  filter(fe < 0.2 & type_of_glass %in% c('tableware', 'headlamps'))\n\n# A tibble: 38 × 11\n      id    ri    na    mg    al    si     k    ca    ba    fe type_of_glass\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast data\n\n# Question 1 - read in file \nyeast_data <- suppressMessages(read_table(\n  'https://www4.stat.ncsu.edu/~online/datasets/yeast.data', # (this data is separated by spaces (https://readr.tidyverse.org/reference/read_table.html)\n  col_names = c('seq_name', 'mcg', 'gvh', 'alm', 'mit', 'erl', 'pox', 'vac', 'nuc', 'class')\n))\nyeast_data \n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n# Question 2 & 3 - apply chain\nyeast_data |>\n  # filter data\n  select(-seq_name, -nuc) |>\n  # group by class\n  group_by(class) |>\n  # create new columns using mutate with summary stats using across on numeric columns\n  mutate(across(where(is.numeric), mean, .names = 'mean_{.col}')) |>\n  mutate(across(where(is.numeric), median, .names = 'median_{.col}'))\n\n# A tibble: 1,484 × 29\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mean_mcg mean_gvh mean_alm\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>    <dbl>    <dbl>    <dbl>\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521    0.533    0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521    0.533    0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521    0.533    0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452    0.456    0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521    0.533    0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481    0.470    0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521    0.533    0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452    0.456    0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521    0.533    0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481    0.470    0.535\n# ℹ 1,474 more rows\n# ℹ 18 more variables: mean_mit <dbl>, mean_erl <dbl>, mean_pox <dbl>,\n#   mean_vac <dbl>, median_mcg <dbl>, median_gvh <dbl>, median_alm <dbl>,\n#   median_mit <dbl>, median_erl <dbl>, median_pox <dbl>, median_vac <dbl>,\n#   median_mean_mcg <dbl>, median_mean_gvh <dbl>, median_mean_alm <dbl>,\n#   median_mean_mit <dbl>, median_mean_erl <dbl>, median_mean_pox <dbl>,\n#   median_mean_vac <dbl>\n\n\n\n\n\nTask 2: combining excel and delimited data\n\nQuestion 1 - load white wine data\n\n# load library\nsuppressMessages(suppressWarnings(library(readxl)))\n\n# load data\nwhite_wine <- read_excel('white-wine.xlsx')\n\n# print tibble\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             <dbl>              <dbl>         <dbl>            <dbl>     <dbl>\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` <dbl>,\n#   `total sulfur dioxide` <dbl>, density <dbl>, pH <dbl>, sulphates <dbl>,\n#   alcohol <dbl>, quality <dbl>\n\n\n\n\nQuestion 2 - update white wine data field names\n\n# load variable names into a tibble\nfield_names <- read_excel(\n  'white-wine.xlsx',\n  sheet = excel_sheets('white-wine.xlsx')[2]\n)\n  \n# update white_wine fuse field_names vector\ncolnames(white_wine) <- field_names[[1]]\n\n\n\nQuestion 3 - add new column with wine type\n\n# add new column to white_wine\nwhite_wine <- white_wine |>\n  # add new field\n  mutate(type = 'white')\n\n\n\nQuestion 4 - load red wine data\n\n# read data\nred_wine <- suppressMessages(read_delim(\n  'https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv',\n  delim = ';'\n))\n\n# update red_wine fuse field_names vector\ncolnames(red_wine) <- field_names[[1]]\n\n# add new column to white_wine\nred_wine <- red_wine |>\n  mutate(type = 'red')\n\n\n\nQuestion 5-9 - combine data and filter as instructed\n\n# 5 combine white and red, ?dplyr::bind_rows\nwine <- dplyr::bind_rows(white_wine, red_wine)\n\n# manipulate wine ata\nwine |>\n  # 6 filter on quality\n  filter(quality > 6.5 & alcohol < 132) |>\n  # 7 sort rows by descending quality 7\n  arrange(desc(quality)) |>\n  # 8 select specified fields\n  select(contains('acid'), alcohol, type, quality) |>\n  # 9 mean and stddev for alcohol by quality\n  group_by(quality) |>\n  mutate(alcohol_mean = mean(alcohol), alcohol_stddev = sd(alcohol))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           <dbl>            <dbl>       <dbl>   <dbl> <chr>   <dbl>        <dbl>\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_stddev <dbl>\n\n\n\n\n\nTask 3: database practice\n\nQuestion 1 - connect to local DB\n\n# load libraries\nlibrary(DBI)\nlibrary(RSQLite)\n\nWarning: package 'RSQLite' was built under R version 4.2.3\n\n# Question 1 - connect to db\ncon <- dbConnect(RSQLite::SQLite(), 'lahman.db')\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n\n\n\nQuestion 2 - select all 2015 teams data using dplyr\n\n# load data to a tibble and filter\nteams_data <- tbl(con, 'Teams')\n\n# filter teams_datato 2015\nteams_data |>\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    <int> <chr> <chr>  <chr>    <chr> <int> <int> <int> <int> <int> <chr>  <chr>\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin <chr>, WSWin <chr>, R <int>, AB <int>, H <int>,\n#   X2B <int>, X3B <int>, HR <int>, BB <int>, SO <int>, SB <int>, CS <int>,\n#   HBP <int>, SF <int>, RA <int>, ER <int>, ERA <dbl>, CG <int>, SHO <int>,\n#   SV <int>, IPouts <int>, HA <int>, HRA <int>, BBA <int>, SOA <int>, E <int>,\n#   DP <int>, FP <dbl>, name <chr>, park <chr>, attendance <int>, BPF <int>,\n#   PPF <int>, teamIDBR <chr>, teamIDlahman45 <chr>, teamIDretro <chr>\n\n\n\n\nQuestion 3 - select all 2015 teams data using SQL\n\n# select all data from teams where yearID = 2015\ntbl(con, \n    sql('\n    select *\n    from Teams t\n    where 1=1\n    and yearID = 2015\n    '\n))\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    <int> <chr> <chr>  <chr>    <chr> <int> <int> <int> <int> <int> <chr>  <chr>\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin <chr>, WSWin <chr>, R <int>, AB <int>, H <int>,\n#   X2B <int>, X3B <int>, HR <int>, BB <int>, SO <int>, SB <int>, CS <int>,\n#   HBP <int>, SF <int>, RA <int>, ER <int>, ERA <dbl>, CG <int>, SHO <int>,\n#   SV <int>, IPouts <int>, HA <int>, HRA <int>, BBA <int>, SOA <int>, E <int>,\n#   DP <int>, FP <dbl>, name <chr>, park <chr>, attendance <int>, BPF <int>,\n#   PPF <int>, teamIDBR <chr>, teamIDlahman45 <chr>, teamIDretro <chr>\n\n\n\n\nQuestion 4 - return all players in the hall of fame, the year, and the category\n\n# pull data\nhall_of_fame <- tbl(con, \n    sql('\n    select\n    playerID,\n    yearID,\n    category\n    \n    from HallOfFame\n    \n    where 1=1\n    and category = \"Player\"\n    and inducted = \"Y\" -- doc implies to use this\n    '\n))\n\n# print results\nhall_of_fame\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   playerID  yearID category\n   <chr>      <int> <chr>   \n 1 cobbty01    1936 Player  \n 2 ruthba01    1936 Player  \n 3 wagneho01   1936 Player  \n 4 mathech01   1936 Player  \n 5 johnswa01   1936 Player  \n 6 lajoina01   1937 Player  \n 7 speaktr01   1937 Player  \n 8 youngcy01   1937 Player  \n 9 alexape01   1938 Player  \n10 sislege01   1939 Player  \n# ℹ more rows\n\n\n\n\nQuestion 5 - combine previous data wiht the People table\n\n# pull data\nhof_players <- tbl(con, \n    sql('\n    select\n    hof.playerId,\n    hof.yearID,\n    hof.category,\n    p.nameFirst,\n    p.nameLast\n    \n    from HallOfFame hof\n    inner join People p\n    on 1=1\n    and hof.playerID = p.playerID\n    \n    where 1=1\n    and hof.category = \"Player\"\n    and hof.inducted = \"Y\"\n    '\n))\n\n# print results\nhof_players\n\n# Source:   SQL [?? x 5]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   playerId  yearID category nameFirst nameLast \n   <chr>      <int> <chr>    <chr>     <chr>    \n 1 cobbty01    1936 Player   Ty        Cobb     \n 2 ruthba01    1936 Player   Babe      Ruth     \n 3 wagneho01   1936 Player   Honus     Wagner   \n 4 mathech01   1936 Player   Christy   Mathewson\n 5 johnswa01   1936 Player   Walter    Johnson  \n 6 lajoina01   1937 Player   Nap       Lajoie   \n 7 speaktr01   1937 Player   Tris      Speaker  \n 8 youngcy01   1937 Player   Cy        Young    \n 9 alexape01   1938 Player   Pete      Alexander\n10 sislege01   1939 Player   George    Sisler   \n# ℹ more rows\n\n\n\n\nQuestion 6 - creating win/loss percentage\n\n# load data to managers\nmanagers <- tbl(con,'Managers') |>\n  # select specified columns\n  select(playerID, G, W, L) |>\n  # grooup by playerID\n  group_by(playerID) |>\n  # summary stats\n  summarize(\n    # total games managed\n    G_managed = sum(G, na.rm = TRUE),\n    #total wins\n    Total_W = sum(W, na.rm = TRUE),\n    # total losses\n    Total_L = sum(L, na.rm = TRUE)\n  ) |>\n  # execute up to this point to calculate summary stats\n  collect() |>\n  # calculate win/loss percentage in a new field\n  mutate(win_percentage = Total_W/G_managed) |>\n  #mutate(loss_percentage = Total_L/G_managed) |>\n  # sort by win percentage\n  arrange(desc(win_percentage))\n\n# print results\nmanagers\n\n# A tibble: 749 × 5\n   playerID  G_managed Total_W Total_L win_percentage\n   <chr>         <int>   <int>   <int>          <dbl>\n 1 bensove01         1       1       0              1\n 2 burwebi01         1       1       0              1\n 3 cohenan01         1       1       0              1\n 4 ebeldi99          3       3       0              1\n 5 falkbi01          1       1       0              1\n 6 hardeme01         3       3       0              1\n 7 simmote01         1       1       0              1\n 8 steinte01         2       2       0              1\n 9 sukefcl01         2       2       0              1\n10 tamarjo01         1       1       0              1\n# ℹ 739 more rows\n\n\n\n\nQuestion 7 - combine results\n\n# pull all hof data, regardless of category\nhof <- tbl(con, \n    sql('\n    select\n    hof.playerId,\n    hof.yearID,\n    hof.category,\n    p.nameFirst,\n    p.nameLast\n\n    from HallOfFame hof\n    inner join People p\n    on 1=1\n    and hof.playerID = p.playerID\n    \n    where 1=1\n    and hof.inducted = \"Y\"\n    '\n)) |>\n  collect()\n\n# combine the managers and hof data\ncombined_data <- inner_join(\n  managers,\n  hof,\n  by = c(\"playerID\" = \"playerID\")\n)\n\n# print results\ncombined_data\n\n# A tibble: 97 × 9\n   playerID  G_managed Total_W Total_L win_percentage yearID category  nameFirst\n   <chr>         <int>   <int>   <int>          <dbl>  <int> <chr>     <chr>    \n 1 simmote01         1       1       0          1       2020 Player    Ted      \n 2 wrighge01        85      59      25          0.694   1937 Pioneer/… George   \n 3 spaldal01       126      78      47          0.619   1939 Pioneer/… Al       \n 4 mccarjo99      3487    2125    1333          0.609   1957 Manager   Joe      \n 5 comisch01      1410     840     541          0.596   1939 Pioneer/… Charlie  \n 6 southbi01      1770    1044     704          0.590   2008 Manager   Billy    \n 7 seleefr99      2180    1284     862          0.589   1999 Manager   Frank    \n 8 chancfr01      1622     946     648          0.583   1946 Player    Frank    \n 9 weaveea99      2541    1480    1060          0.582   1996 Manager   Earl     \n10 lopezal01      2425    1410    1004          0.581   1977 Manager   Al       \n# ℹ 87 more rows\n# ℹ 1 more variable: nameLast <chr>"
  },
  {
    "objectID": "ST558_HW3_backup.html",
    "href": "ST558_HW3_backup.html",
    "title": "ST558_HW3 - Lee Worthington",
    "section": "",
    "text": "Task 1: conceptual questions\n\n\n——————————————-\n\nQuestion 1 - If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nIf the working directory is myfolder/homework/ then to get the file MyData.csv from myfolder the relative path would be ‘../MyData.csv’\n\n\n\nQuestion 2 - What are the major benefits of using R projects?\n\nRprojects gives you an easy way to:\n\nSet a structured working directory and workspace with a specific environment for all your relevant files and objects\nImplement version control using git\nProvide reproducibility as the saved environment allows others to generate the same results\nAllow easier collaboration with github\n\n\n\n\nQuestion 3 - What is git and what is github?\n\nGit is version control software, whereas github is a hosting service for git based projects\n\n\n\nQuestion 4 - what are the two main differences between a tiblle and a data.frame?\n\ndata.frame vs tibble\n\nWhen printing tibbles print additional information such as the number of rows and columns\nTibbles don’t coerce down to a vector when you subset to a single column using [], instead they return a tibble, unlike a data frame which coerces down to a vector\n\n\n\n\nQuestion 5 - rewrite the following nested function call using baseR’s chaining operator\n\n# Original code \narrange(filter(select(as_tibble(iris), starts_with(\"Petal\"), Species), Petal.Length < 1.55), Species)\n\n#New code\niris |>\n  as_tibble() |>\n  select(starts_with(\"Petal\"), Species) |>\n  filter(Petal.Length < 1.55) |>\n  arrange(Species)\n\n\n\nQuestion 6 - what is meant by long format data and wide format data? Which is generally prefered for statistical analysis?\n\nIn long format each row represents a single observation and each column represents a single variable, whereas in wide format you may have multiple observations in a single row.\n\n\n\n\n——————————————-\n\n\nTask 2: reading delimited data\n\n\n——————————————-\n\nGlass data\n\n# load library\nlibrary(tidyverse)\n\nWarning: package 'tidyverse' was built under R version 4.2.3\n\n\nWarning: package 'ggplot2' was built under R version 4.2.3\n\n\nWarning: package 'tibble' was built under R version 4.2.3\n\n\nWarning: package 'tidyr' was built under R version 4.2.3\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'purrr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'forcats' was built under R version 4.2.3\n\n\nWarning: package 'lubridate' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\n# read in file\nglass_data <- read_csv(\n  'https://www4.stat.ncsu.edu/~online/datasets/glass.data',\n  col_names = c('id', 'ri', 'na', 'mg', 'al', 'si', 'k', 'ca', 'ba', 'fe', 'type_of_glass')\n)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): id, ri, na, mg, al, si, k, ca, ba, fe, type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# call tibble\nglass_data\n\n# A tibble: 214 × 11\n      id    ri    na    mg    al    si     k    ca    ba    fe type_of_glass\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>         <dbl>\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n# cstart chain on glass_data\nglass_data |>\n  \n  # update type_of_glass field\n  mutate(type_of_glass = ifelse(type_of_glass == 1, 'building_windows_float_processed',\n                ifelse(type_of_glass == 2, 'building_windows_non_float_processed',\n                       ifelse(type_of_glass == 3, 'vehicle_windows_float_processed',\n                              ifelse(type_of_glass == 4, 'vehicle_windows_non_float_processed',\n                                     ifelse(type_of_glass == 5, 'containers',\n                                            ifelse(type_of_glass == 6, 'tableware',\n                                                   ifelse(type_of_glass == 7, 'headlamps', NA)))))))) |>\n  \n  # filter on fe variable (& or , should work)\n  filter(fe < 0.2 & type_of_glass %in% c('tableware', 'headlamps'))\n\n# A tibble: 38 × 11\n      id    ri    na    mg    al    si     k    ca    ba    fe type_of_glass\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows\n\n\n\n\nYeast data\n\n# read in file (this data is separated by spaces (https://readr.tidyverse.org/reference/read_table.html)\nyeast_data <- read_table(\n  'https://www4.stat.ncsu.edu/~online/datasets/yeast.data',\n  col_names = c('seq_name', 'mcg', 'gvh', 'alm', 'mit', 'erl', 'pox', 'vac', 'nuc', 'class')\n)\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\n# call tibble\nyeast_data \n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   <chr>      <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n# apply chain\nyeast_data |>\n  # filter data\n  select(-seq_name, -nuc) |>\n  # group by class\n  group_by(class) |>\n  # create new columns using mutate with summary stats using across on numeric columns\n  mutate(across(where(is.numeric), mean, .names = 'mea_{.col}')) |>\n  mutate(across(where(is.numeric), median, .names = 'median_{.col}'))\n\n# A tibble: 1,484 × 29\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mea_mcg mea_gvh mea_alm\n   <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <chr>   <dbl>   <dbl>   <dbl>\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT     0.521   0.533   0.517\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT     0.521   0.533   0.517\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT     0.521   0.533   0.517\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC     0.452   0.456   0.529\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT     0.521   0.533   0.517\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT     0.481   0.470   0.535\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT     0.521   0.533   0.517\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC     0.452   0.456   0.529\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT     0.521   0.533   0.517\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT     0.481   0.470   0.535\n# ℹ 1,474 more rows\n# ℹ 18 more variables: mea_mit <dbl>, mea_erl <dbl>, mea_pox <dbl>,\n#   mea_vac <dbl>, median_mcg <dbl>, median_gvh <dbl>, median_alm <dbl>,\n#   median_mit <dbl>, median_erl <dbl>, median_pox <dbl>, median_vac <dbl>,\n#   median_mea_mcg <dbl>, median_mea_gvh <dbl>, median_mea_alm <dbl>,\n#   median_mea_mit <dbl>, median_mea_erl <dbl>, median_mea_pox <dbl>,\n#   median_mea_vac <dbl>\n\n\n\n\n\n——————————————-\n\n\nTask 2: combining excel and delimited data\n\n\n——————————————-\n\nPart 1\n\n# load library\nlibrary(readxl)\n\nWarning: package 'readxl' was built under R version 4.2.3\n\n# load data\nwhite_wine <- read_excel('white-wine.xlsx')\n\n# print tibble\nwhite_wine\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             <dbl>              <dbl>         <dbl>            <dbl>     <dbl>\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` <dbl>,\n#   `total sulfur dioxide` <dbl>, density <dbl>, pH <dbl>, sulphates <dbl>,\n#   alcohol <dbl>, quality <dbl>\n\n\n\n\nPart 2\n\n# load variable names into a tibble\nfield_names <- read_excel(\n  'white-wine.xlsx',\n  sheet = excel_sheets('white-wine.xlsx')[2]\n)\n  \n# update white_wine fuse field_names vector\ncolnames(white_wine) <- field_names[[1]]\n\n# print results\nwhite_wine\n\n# A tibble: 4,898 × 12\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           <dbl>            <dbl>       <dbl>          <dbl>     <dbl>\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: free_sulfur_dioxide <dbl>, total_sulfur_dioxide <dbl>,\n#   density <dbl>, pH <dbl>, sulphates <dbl>, alcohol <dbl>, quality <dbl>\n\n\n\n\nPart 3\n\n# add new column to white_wine\nwhite_wine <- white_wine |>\n  # add new field\n  mutate(type = 'white')\n\n\n\nPart 4\n\n# read data\nred_wine <- read_delim(\n  'https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv',\n  delim = ';'\n)\n\nRows: 1599 Columns: 12\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \";\"\ndbl (12): fixed acidity, volatile acidity, citric acid, residual sugar, chlo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n# update red_wine fuse field_names vector\ncolnames(red_wine) <- field_names[[1]]\n\n# add new column to white_wine\nred_wine <- red_wine |>\n  mutate(type = 'red')\n\nred_wine\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           <dbl>            <dbl>       <dbl>          <dbl>     <dbl>\n 1           7.4             0.7         0               1.9     0.076\n 2           7.8             0.88        0               2.6     0.098\n 3           7.8             0.76        0.04            2.3     0.092\n 4          11.2             0.28        0.56            1.9     0.075\n 5           7.4             0.7         0               1.9     0.076\n 6           7.4             0.66        0               1.8     0.075\n 7           7.9             0.6         0.06            1.6     0.069\n 8           7.3             0.65        0               1.2     0.065\n 9           7.8             0.58        0.02            2       0.073\n10           7.5             0.5         0.36            6.1     0.071\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide <dbl>, total_sulfur_dioxide <dbl>,\n#   density <dbl>, pH <dbl>, sulphates <dbl>, alcohol <dbl>, quality <dbl>,\n#   type <chr>\n\n\n\n\nPart 5\n\n# part 5 combine white and red, ?dplyr::bind_rows\nwine <- dplyr::bind_rows(white_wine, red_wine)\n\n# part 6\nwine |>\n  # filter on quality 6\n  filter(quality > 6.5 & alcohol < 132) |>\n  # sort rows by descending quality 7\n  arrange(desc(quality)) |>\n  # select specified fields\n  select(contains('acid'), alcohol, type, quality) |>\n  # mean and stddev for alcohol by quality\n  group_by(quality) |>\n  mutate(alcohol_mean = mean(alcohol), alcohol_stddev = sd(alcohol))\n\n# A tibble: 1,206 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol type  quality alcohol_mean\n           <dbl>            <dbl>       <dbl>   <dbl> <chr>   <dbl>        <dbl>\n 1            91             0.27        0.45     104 white       9        122. \n 2            66             0.36        0.29     124 white       9        122. \n 3            74             0.24        0.36     125 white       9        122. \n 4            69             0.36        0.34     127 white       9        122. \n 5            71             0.26        0.49     129 white       9        122. \n 6            62             0.66        0.48     128 white       8         94.1\n 7            62             0.66        0.48     128 white       8         94.1\n 8            68             0.26        0.42     105 white       8         94.1\n 9            67             0.23        0.31     107 white       8         94.1\n10            67             0.23        0.31     107 white       8         94.1\n# ℹ 1,196 more rows\n# ℹ 1 more variable: alcohol_stddev <dbl>\n\n\n\n\n\n——————————————-\n\n\nTask 3: database practice\n\n\n——————————————-\n\n# install library\n#install.packages('DBI')\n#install.packages('RSQLite')\n\n# load libraries\nlibrary(DBI)\nlibrary(RSQLite)\n\nWarning: package 'RSQLite' was built under R version 4.2.3\n\n# 1 connect to db\ncon <- dbConnect(RSQLite::SQLite(), 'lahman.db')\ndbListTables(con)\n\n [1] \"AllstarFull\"         \"Appearances\"         \"AwardsManagers\"     \n [4] \"AwardsPlayers\"       \"AwardsShareManagers\" \"AwardsSharePlayers\" \n [7] \"Batting\"             \"BattingPost\"         \"CollegePlaying\"     \n[10] \"Fielding\"            \"FieldingOF\"          \"FieldingOFsplit\"    \n[13] \"FieldingPost\"        \"HallOfFame\"          \"HomeGames\"          \n[16] \"LahmanData\"          \"Managers\"            \"ManagersHalf\"       \n[19] \"Parks\"               \"People\"              \"Pitching\"           \n[22] \"PitchingPost\"        \"Salaries\"            \"Schools\"            \n[25] \"SeriesPost\"          \"Teams\"               \"TeamsFranchises\"    \n[28] \"TeamsHalf\"           \"battingLabels\"       \"fieldingLabels\"     \n[31] \"pitchingLabels\"     \n\n# 2 load data to a tibble\nteams_data <- tbl(con, 'Teams')\n\nteams_data |>\n  filter(yearID == 2015)\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    <int> <chr> <chr>  <chr>    <chr> <int> <int> <int> <int> <int> <chr>  <chr>\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin <chr>, WSWin <chr>, R <int>, AB <int>, H <int>,\n#   X2B <int>, X3B <int>, HR <int>, BB <int>, SO <int>, SB <int>, CS <int>,\n#   HBP <int>, SF <int>, RA <int>, ER <int>, ERA <dbl>, CG <int>, SHO <int>,\n#   SV <int>, IPouts <int>, HA <int>, HRA <int>, BBA <int>, SOA <int>, E <int>,\n#   DP <int>, FP <dbl>, name <chr>, park <chr>, attendance <int>, BPF <int>,\n#   PPF <int>, teamIDBR <chr>, teamIDlahman45 <chr>, teamIDretro <chr>\n\n# 3 use sql to do the same thing\ntbl(con, \n    sql('\n    select *\n    from Teams t\n    where 1=1\n    and yearID = 2015\n    '\n))\n\n# Source:   SQL [?? x 48]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   yearID lgID  teamID franchID divID  Rank     G Ghome     W     L DivWin WCWin\n    <int> <chr> <chr>  <chr>    <chr> <int> <int> <int> <int> <int> <chr>  <chr>\n 1   2015 NL    ARI    ARI      W         3   162    81    79    83 N      N    \n 2   2015 NL    ATL    ATL      E         4   162    81    67    95 N      N    \n 3   2015 AL    BAL    BAL      E         3   162    78    81    81 N      N    \n 4   2015 AL    BOS    BOS      E         5   162    81    78    84 N      N    \n 5   2015 AL    CHA    CHW      C         4   162    81    76    86 N      N    \n 6   2015 NL    CHN    CHC      C         3   162    81    97    65 N      Y    \n 7   2015 NL    CIN    CIN      C         5   162    81    64    98 N      N    \n 8   2015 AL    CLE    CLE      C         3   161    80    81    80 N      N    \n 9   2015 NL    COL    COL      W         5   162    81    68    94 N      N    \n10   2015 AL    DET    DET      C         5   161    81    74    87 N      N    \n# ℹ more rows\n# ℹ 36 more variables: LgWin <chr>, WSWin <chr>, R <int>, AB <int>, H <int>,\n#   X2B <int>, X3B <int>, HR <int>, BB <int>, SO <int>, SB <int>, CS <int>,\n#   HBP <int>, SF <int>, RA <int>, ER <int>, ERA <dbl>, CG <int>, SHO <int>,\n#   SV <int>, IPouts <int>, HA <int>, HRA <int>, BBA <int>, SOA <int>, E <int>,\n#   DP <int>, FP <dbl>, name <chr>, park <chr>, attendance <int>, BPF <int>,\n#   PPF <int>, teamIDBR <chr>, teamIDlahman45 <chr>, teamIDretro <chr>\n\n# 4 return all players in the hall of fame, the year, and the category\nhall_of_fame <- tbl(con, \n    sql('\n    select category, playerId, yearID \n    from HallOfFame\n    where 1=1\n    and category = \"Player\"\n    '\n))\nhall_of_fame\n\n# Source:   SQL [?? x 3]\n# Database: sqlite 3.45.2 [C:\\Users\\lawor\\OneDrive\\Desktop\\School\\ST 558\\Homework\\ST558_HW3\\lahman.db]\n   category playerId  yearID\n   <chr>    <chr>      <int>\n 1 Player   cobbty01    1936\n 2 Player   ruthba01    1936\n 3 Player   wagneho01   1936\n 4 Player   mathech01   1936\n 5 Player   johnswa01   1936\n 6 Player   lajoina01   1936\n 7 Player   speaktr01   1936\n 8 Player   youngcy01   1936\n 9 Player   hornsro01   1936\n10 Player   cochrmi01   1936\n# ℹ more rows\n\n# 5 combine previous data wiht the People table\nhof_players <- tbl(con, \n    sql('\n    select \n    hof.category,\n    \n    hof.playerId, \n    p.nameFirst,\n    p.nameLast,\n    \n    hof.yearID \n\n    from HallOfFame hof\n    inner join People p\n    on 1=1\n    and hof.playerID = p.playerID\n    \n    where 1=1\n    and hof.category = \"Player\"\n    '\n))\n\n# 6 Managers table manipulation\nmanagers <- tbl(con,'Managers') |>\n  # select specified columns\n  select(playerID, G, W, L) |>\n  # grooup by playerID\n  group_by(playerID) |>\n  # summary stats\n  summarize(\n    # total games managed\n    G_managed = sum(G, na.rm = TRUE),\n    #total wins\n    Total_W = sum(W, na.rm = TRUE),\n    # total losses\n    Total_L = sum(L, na.rm = TRUE)\n  ) |>\n  # execute up to this point to calculate summary stats\n  collect() |>\n  # calculate win/loss percentage in a new field\n  mutate(win_percentage = Total_W/G_managed) |>\n  #mutate(loss_percentage = Total_L/G_managed) |>\n  # sort by win percentage\n  arrange(desc(win_percentage))\n\n# 7 combine results\n# pull all hof data, regardless of category\nhof <- tbl(con, \n    sql('\n    select \n    hof.category,\n    \n    hof.playerID, \n    p.nameFirst,\n    p.nameLast,\n    \n    hof.yearID \n\n    from HallOfFame hof\n    inner join People p\n    on 1=1\n    and hof.playerID = p.playerID\n    \n    where 1=1\n    '\n)) |>\n  collect()\n\n# combine the data\ncombined_data <- inner_join(\n  managers,\n  hof,\n  by = c(\"playerID\" = \"playerID\")\n)\n\n```"
  }
]